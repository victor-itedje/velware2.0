%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 1814 2388
%%HiResBoundingBox: 0 0 1813.9199 2388
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 1813.9199 2388 re
W
q
[0.24 0 0 -0.24 0 2388] cm
q
0 0 7558.333 9949.6172 re
W*
q
[3.125289 0 0 3.125808 0 0.00812021] cm
/DeviceRGB {} CS
[0.1333 0.1569 0.1922] SC
/DeviceRGB {} cs
[0.1333 0.1569 0.1922] sc
0 0 2418.4431 3184.0491 re
f
Q
q
[28.760324 0 0 28.765106 287.60324 287.65918] cm
q
5 65 m
121.5 0 l
238 65 l
121.5 10 l
5 65 l
h
5 246 m
121.5 326 l
238 241 l
121.5 316 l
5 246 l
h
W*
[233.000013 0 0 326.000029 5 -0.000014532] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[28.76256 0 0 28.767342 2344.9895 2718.0391] cm
q
50.459 95.502998 m
47.939999 95.502998 45.484001 95.243996 43.076 94.848 c
45.139999 89.705002 l
46.883999 89.941002 48.651001 90.104004 50.459 90.104004 c
52.959999 90.104004 55.398998 89.843002 57.771999 89.401001 c
51.773998 82.903999 l
43.259998 82.903999 l
41.459999 82.903999 l
39.66 82.903999 l
39.66 77.505997 l
33.761002 77.505997 l
33.138 78.575996 31.990002 79.306 30.662003 79.306 c
28.674002 79.306 27.061003 77.694 27.061003 75.705002 c
27.061003 73.716003 28.673002 72.105003 30.662003 72.105003 c
31.991003 72.105003 33.139004 72.833 33.761002 73.905006 c
39.660004 73.905006 l
39.660004 72.105003 l
39.660004 68.504005 l
43.260002 68.504005 l
61.259998 68.504005 l
61.259998 69.274002 l
65.675995 74.057999 l
65.990997 73.968002 66.316994 73.904999 66.658997 73.904999 c
68.646996 73.904999 70.258995 75.516998 70.258995 77.505997 c
70.258995 79.492996 68.647995 81.103996 66.658997 81.103996 c
64.669998 81.103996 63.059998 79.493996 63.059998 77.505997 c
63.059998 77.209999 63.103996 76.926994 63.169998 76.652 c
58.973 72.105003 l
43.261002 72.105003 l
43.261002 79.305 l
54.060001 79.305 l
54.060001 80.072998 l
61.785 88.438995 l
68.361 86.478996 74.198997 82.837997 78.856003 78.043991 c
73.373001 72.104988 l
72.059998 72.104988 l
72.059998 55.081001 l
66.625 49.198002 l
65.122002 50.507004 63.523998 51.900002 61.973999 53.251003 c
61.674999 53.514004 61.080997 54.030003 61.080997 54.030003 c
59.459999 54.054001 l
59.459999 54.105 l
51.760998 54.105 l
51.137997 55.176998 49.989998 55.905998 48.660999 55.905998 c
46.673 55.905998 45.061001 54.293999 45.061001 52.304996 c
45.061001 50.315994 46.673 48.705997 48.660999 48.705997 c
49.989998 48.705997 51.138 49.433998 51.760998 50.505997 c
59.459999 50.505997 l
59.459999 50.898998 l
70.259003 41.275997 l
70.259003 27.107 l
63.061005 27.107 l
63.061005 34.806999 l
64.131004 35.43 64.859001 36.577999 64.859001 37.905998 c
64.859001 39.893997 63.249001 41.507 61.260002 41.507 c
59.273003 41.507 57.660004 39.895 57.660004 37.905998 c
57.660004 36.577 58.388004 35.428997 59.460003 34.806999 c
59.460003 27.106998 l
59.460003 25.306999 l
59.460003 23.507 l
70.259003 23.507 l
70.259003 16.323999 l
68.833 15.499 67.369003 14.730999 65.838005 14.086 c
65.265007 14.349999 64.632004 14.507999 63.959003 14.507999 c
61.475002 14.507999 59.460003 12.492999 59.460003 10.007999 c
59.460003 7.523999 61.475002 5.508999 63.959003 5.508999 c
66.202003 5.508999 68.046005 7.152999 68.387001 9.296999 c
84.305 16.226999 95.457001 32.037998 95.457001 50.505997 c
95.457001 75.357002 75.311996 95.502998 50.459 95.502998 c
h
81.057999 52.306 m
79.07 52.306 77.459 50.695999 77.459 48.707001 c
77.459 47.378002 78.187996 46.23 79.258003 45.605999 c
79.258003 30.708 l
81.058006 30.708 l
82.859009 30.708 l
84.729012 30.708 l
81.976013 25.977001 78.258011 21.879 73.860008 18.653999 c
73.860008 45.106998 l
71.318008 45.106998 l
70.734009 45.614998 70.068008 46.196999 69.340012 46.829998 c
75.865013 53.898998 l
75.594009 54.105999 l
75.658012 54.105999 l
75.658012 59.506001 l
77.958015 59.506001 l
78.580017 58.434002 79.728012 57.706001 81.057014 57.706001 c
83.045013 57.706001 84.658012 59.318001 84.658012 61.307003 c
84.658012 63.294003 83.046013 64.907005 81.057014 64.907005 c
79.728012 64.907005 78.580017 64.178009 77.958015 63.107006 c
75.658012 63.107006 l
75.658012 69.275009 l
81.256012 75.338013 l
86.74501 68.547012 90.058014 59.923012 90.058014 50.507011 c
90.058014 44.72401 88.792015 39.250011 86.560013 34.308014 c
82.858009 34.308014 l
82.858009 45.606014 l
83.930008 46.231014 84.658012 47.378014 84.658012 48.707016 c
84.657997 50.695 83.045998 52.306 81.057999 52.306 c
h
50.459 10.908 m
49.244999 10.908 48.047001 10.984 46.861 11.091 c
46.861 22.476999 l
51.277 27.261 l
51.591 27.171 51.917 27.108 52.258999 27.108 c
54.246998 27.108 55.860001 28.719999 55.860001 30.709 c
55.860001 32.696999 54.248001 34.308998 52.258999 34.308998 c
50.269997 34.308998 48.66 32.696999 48.66 30.708998 c
48.66 30.413998 48.703999 30.129997 48.771 29.855997 c
46.236 27.107998 l
44.318001 27.107998 l
37.968002 32.643997 l
42.828003 37.906998 l
43.259003 37.906998 l
43.259003 38.374996 l
43.277004 38.394997 l
43.259003 38.410995 l
43.259003 61.307995 l
61.759998 61.307995 l
62.382 60.234993 63.529999 59.506996 64.859001 59.506996 c
66.847 59.506996 68.459999 61.118996 68.459999 63.107998 c
68.459999 65.097 66.848 66.707001 64.859001 66.707001 c
63.530003 66.707001 62.382 65.978004 61.760002 64.907997 c
43.261002 64.907997 l
41.461002 64.907997 l
39.661003 64.907997 l
39.661003 39.782001 l
23.152 21.899 l
22.152 22.852001 21.210001 23.862 20.313 24.914 c
35.630001 41.507 l
36.061001 41.507 l
36.061001 41.973999 l
36.079002 41.993999 l
36.061001 42.009998 l
36.061001 63.106998 l
36.061001 66.706001 l
32.462002 66.706001 l
23.462002 66.706001 l
21.664001 66.706001 l
19.864002 66.706001 l
19.864002 57.707001 l
11.537003 57.707001 l
14.281002 72.602005 25.360003 84.564003 39.766003 88.602997 c
37.741001 93.651993 l
19.087999 88.157997 5.464 70.935997 5.464 50.507 c
5.464 25.655001 25.610001 5.509998 50.459999 5.509998 c
52.906998 5.509998 55.291 5.757998 57.632 6.133998 c
55.57 11.275999 l
53.893002 11.06 52.195999 10.908 50.459 10.908 c
h
18.068001 27.790001 m
13.534 34.215 10.862001 42.041 10.862001 50.507 c
10.862001 51.721001 10.925001 52.918999 11.033002 54.105999 c
23.461002 54.105999 l
23.461002 55.906998 l
23.461002 57.706997 l
23.461002 63.106998 l
32.461002 63.106998 l
32.461002 43.382 l
26.834003 37.286999 l
21.603004 44.531998 l
21.634005 44.719997 21.663004 44.909996 21.663004 45.106998 c
21.663004 47.094997 20.051004 48.706997 18.063004 48.706997 c
16.075003 48.706997 14.463003 47.094997 14.463003 45.106998 c
14.463003 43.118999 16.075003 41.507 18.063004 41.507 c
18.464003 41.507 18.842003 41.588001 19.202003 41.709 c
24.344004 34.589001 l
18.068001 27.790001 l
h
43.261002 11.594 m
36.764 12.789 30.843002 15.592 25.872002 19.535999 c
35.528 29.997 l
43.261002 23.254999 l
43.261002 11.594 l
h
W*
[89.993002 0 0 89.993999 5.464005 5.509002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[69.209328 0 0 69.220833 282.57639 5694.5757] cm
q
14.1 5.32 m
14.246667 5.52 14.273334 5.74 14.18 5.98 c
8.700001 19.52 l
8.646668 19.653334 8.56 19.76 8.440001 19.84 c
8.320001 19.92 8.186667 19.959999 8.040001 19.960001 c
6.280001 19.960001 l
6.133334 19.960001 6.000001 19.92 5.880001 19.84 c
5.76 19.76 5.673334 19.653334 5.620001 19.52 c
0.140001 5.980001 l
0.033334 5.753334 0.053334 5.533334 0.200001 5.320001 c
0.346668 5.106668 0.540001 5.000001 0.780001 5.000001 c
7.460001 5.000001 l
7.646668 5.000001 7.810001 5.070001 7.950001 5.210001 c
8.090001 5.35 8.160001 5.52 8.160001 5.72 c
8.160001 7.18 l
8.160001 7.380001 8.090001 7.550001 7.950001 7.69 c
7.810001 7.83 7.646668 7.900001 7.460001 7.900001 c
4.100001 7.900001 l
7.160001 15.6 l
11.18 5.440001 l
11.233334 5.306667 11.320001 5.200001 11.440001 5.12 c
11.56 5.04 11.693334 5 11.84 5.000001 c
13.520001 5.000001 l
13.64 5.000001 13.753334 5.030001 13.860001 5.090001 c
13.966667 5.150001 14.046667 5.226667 14.1 5.320001 c
14.1 5.32 l
h
26.5 16.959999 m
26.699999 16.959999 26.866667 17.029999 27 17.169998 c
27.133333 17.309998 27.200001 17.479998 27.200001 17.679998 c
27.200001 19.139999 l
27.200001 19.326666 27.133333 19.49 27 19.629999 c
26.866667 19.769999 26.699999 19.839998 26.5 19.839998 c
16.619999 19.839998 l
16.433332 19.839998 16.269999 19.769999 16.129999 19.629999 c
15.99 19.49 15.92 19.326666 15.919999 19.139999 c
15.919999 17.68 l
15.919999 17.480001 15.989999 17.310001 16.129999 17.17 c
16.27 17.029999 16.433332 16.959999 16.619999 16.960001 c
26.5 16.960001 l
26.5 16.959999 l
h
16.620001 13.86 m
16.433334 13.86 16.27 13.79 16.130001 13.65 c
15.990002 13.509999 15.920002 13.346666 15.920001 13.16 c
15.920001 11.66 l
15.920001 11.473333 15.990001 11.31 16.130001 11.17 c
16.27 11.03 16.433334 10.96 16.620001 10.96 c
25.6 10.96 l
25.799999 10.96 25.969999 11.03 26.110001 11.17 c
26.250002 11.31 26.320002 11.473333 26.32 11.66 c
26.32 13.16 l
26.32 13.346666 26.25 13.509999 26.110001 13.65 c
25.970001 13.79 25.800001 13.86 25.6 13.86 c
16.620001 13.86 l
h
26.5 5 m
26.699999 5 26.866667 5.07 27 5.21 c
27.133333 5.35 27.200001 5.513333 27.200001 5.7 c
27.200001 7.16 l
27.200001 7.36 27.133333 7.53 27 7.67 c
26.866667 7.81 26.699999 7.88 26.5 7.88 c
16.619999 7.88 l
16.433332 7.88 16.269999 7.81 16.129999 7.67 c
15.99 7.53 15.92 7.36 15.919999 7.16 c
15.919999 5.7 l
15.919999 5.513333 15.989999 5.35 16.129999 5.21 c
16.27 5.07 16.433332 5.000001 16.619999 5 c
26.5 5 l
h
31.84 5 m
32.026665 5 32.189999 5.07 32.330002 5.21 c
32.470005 5.35 32.540005 5.513333 32.540001 5.7 c
32.540001 19.099998 l
32.540001 19.286665 32.470001 19.449999 32.330002 19.589998 c
32.190002 19.729998 32.026669 19.799997 31.840002 19.799997 c
30.320002 19.799997 l
30.133335 19.799997 29.970001 19.729998 29.830002 19.589998 c
29.690002 19.449999 29.620003 19.286665 29.620003 19.099998 c
29.620003 5.699999 l
29.620003 5.513332 29.690002 5.349999 29.830002 5.209999 c
29.970001 5.069999 30.133335 5 30.320002 4.999999 c
31.840002 4.999999 l
31.84 5 l
h
39.139999 16.940001 m
39.34 16.940001 39.506664 17.01 39.639999 17.15 c
39.773335 17.289999 39.84 17.453333 39.84 17.639999 c
39.84 19.099998 l
39.84 19.286665 39.773335 19.449999 39.639999 19.589998 c
39.506664 19.729998 39.34 19.799997 39.139999 19.799997 c
34.48 19.799997 l
34.279999 19.799997 34.113335 19.729998 33.98 19.589998 c
33.846664 19.449999 33.779999 19.286665 33.779999 19.099998 c
33.779999 17.639999 l
33.779999 17.453333 33.846664 17.289999 33.98 17.15 c
34.113335 17.01 34.279999 16.940001 34.48 16.940001 c
39.139999 16.940001 l
h
W
[39.767369 0 0 14.960002 0.0726324 5.000001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000988 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.000988 1 0 axialSH
Q
Q
q
[75.510529 0 0 75.523079 3275.0759 5560.6333] cm
q
18.576 6.424 m
18.694641 6.424 18.813459 6.54297 18.71176 6.72958 c
12.40646 19.88158 l
12.355613 19.983271 12.27087 20.050911 12.15222 20.050911 c
11.99984 20.050911 l
11.89798 20.050911 11.79628 19.98328 11.76238 19.88158 c
9.59288 15.322281 l
7.42338 19.898581 l
7.372533 20.000111 7.28779 20.067911 7.16914 20.067911 c
7.0166 20.067911 l
6.91491 20.067911 6.81321 20.000114 6.76236 19.898581 c
0.45726 6.729581 l
0.372514 6.559921 0.491158 6.441271 0.6098 6.441271 c
1.7454 6.441271 l
1.89794 6.441271 1.93184 6.542961 2.01659 6.712461 c
7.10129 17.61046 l
8.86399 13.779961 l
5.50809 6.712161 l
5.423344 6.542671 5.541988 6.424021 5.6608 6.424021 c
6.8133 6.424021 l
6.94889 6.424021 6.99974 6.525881 7.06737 6.695211 c
9.59277 12.18671 l
12.10127 6.71211 l
12.186016 6.542621 12.236859 6.44092 12.372459 6.44092 c
13.52496 6.44092 l
13.6436 6.44092 13.745299 6.55956 13.660549 6.746 c
10.321549 13.7799 l
12.08425 17.5935 l
17.168949 6.6955 l
17.236746 6.52617 17.28759 6.42431 17.423189 6.42431 c
18.575689 6.42431 l
18.576 6.424 l
h
30.203592 19.779831 m
30.271389 19.915421 30.237822 20 30.085281 20 c
29.051382 20 l
28.932741 20 28.864943 19.949154 28.814093 19.84746 c
27.627693 17.32206 l
19.441292 17.32206 l
18.254892 19.84746 l
18.204046 19.94915 18.136412 20 18.034552 20 c
16.966751 20 l
16.84811 20 16.780312 19.915421 16.84811 19.779831 c
23.203911 6.508831 l
23.271708 6.390191 23.322552 6.356291 23.407131 6.356291 c
23.644581 6.356291 l
23.729326 6.356291 23.797121 6.390189 23.847971 6.508831 c
30.203592 19.779831 l
h
20.017094 16.1019 m
27.050993 16.1019 l
23.525593 8.6443 l
20.017094 16.1019 l
h
41.762253 19.76288 m
41.847 19.89847 41.795986 20 41.643444 20 c
40.762085 20 l
40.490894 20 40.304455 19.779831 40.202766 19.627291 c
37.202766 15.373091 l
37.15192 15.373091 l
33.270519 15.373091 l
33.270519 19.76289 l
33.270519 19.91543 33.202721 20.00001 33.03323 20.00001 c
32.151871 20.00001 l
31.999331 20.00001 31.93153 19.91543 31.93153 19.76289 c
31.93153 6.66089 l
31.93153 6.508349 31.999327 6.44055 32.151871 6.44055 c
37.151871 6.44055 l
40.321369 6.44055 41.779171 8.89815 41.779171 10.91515 c
41.779171 12.64395 40.728371 14.64395 38.507973 15.220249 c
41.762253 19.76288 l
h
33.271053 7.729 m
33.271217 14.1017 l
37.050919 14.1017 l
39.356018 14.1017 40.45752 12.4915 40.45752 10.8814 c
40.45752 9.2882 39.338921 7.729 37.05072 7.729 c
33.271019 7.729 l
33.271053 7.729 l
h
52.677765 7.729 m
45.322166 7.729497 l
45.322166 12.695396 l
49.864567 12.695396 l
50.017105 12.695396 50.101856 12.763193 50.101856 12.932687 c
50.101856 13.746077 l
50.101856 13.898617 50.017109 13.966416 49.864567 13.966416 c
45.322166 13.966416 l
45.322166 18.712215 l
52.678066 18.712215 l
52.830605 18.712215 52.915188 18.796961 52.915188 18.949335 c
52.915188 19.762896 l
52.915188 19.932386 52.847389 20.000015 52.677898 20.000015 c
44.2033 20.000015 l
44.050762 20.000015 43.98296 19.915436 43.98296 19.779846 c
43.98296 6.660846 l
43.98296 6.508306 44.067707 6.440506 44.2033 6.440506 c
52.677902 6.440506 l
52.830441 6.440506 52.915024 6.525252 52.915024 6.660846 c
52.915024 7.508306 l
52.915024 7.643896 52.847225 7.728646 52.677734 7.728646 c
52.677765 7.729 l
h
W
[52.486619 0 0 13.71162 0.428571 6.356294] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.001068 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.001068 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
